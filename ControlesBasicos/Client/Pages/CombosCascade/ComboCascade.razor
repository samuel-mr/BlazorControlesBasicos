@page "/combo-cascade"

  <EditForm Model="@VentaModel" OnValidSubmit="@RegistrarEnBaseDeDatos">
    <DataAnnotationsValidator />


    <!------------------------   GENERO  -------------------------------------->
    <InputSelectNumber class="form-control"
                       ValueChanged="@((int value) =>GeneroHasChanged(value))"
                       ValueExpression="@(()=> generoId)"
                       Value="@generoId">
      <option value="0">--Seleccionar género--</option>
      @foreach (var item in GeneroList)
      {
        @if (item.Id == generoId)
        {
          <option selected value="@item.Id">@item.Descripcion</option>
        }
        else
        {
          <option value="@item.Id">@item.Descripcion</option>
        }
      }
    </InputSelectNumber>


    <!------------------------   JUEGO  -------------------------------------->
    <InputSelectNumber class="form-control"
                       @bind-Value="@VentaModel.JuegId">
      <option value="0">--Seleccionar Juego--</option>
      @foreach (var item in JuegosList)
      {
        @if (item.Id == VentaModel.JuegId)
        {
          <option selected value="@item.Id">@item.Titulo</option>
        }
        else
        {
          <option value="@item.Id">@item.Titulo</option>
        }
      }
    </InputSelectNumber>


  </EditForm>

<p>
  Moneda seleccionada:
</p>

@code{
  public Venta VentaModel { get; set; } = new Venta();

  //Almacena temporalemtne el género seleccionado
  private int generoId = 0;

  List<Genero> GeneroList = new List<Genero>();
  List<Juego> JuegosList = new List<Juego>();

  protected override async Task OnInitializedAsync()
  {
    var result = await (new Repositorio()).GetGeneros();
    GeneroList = result;
  }

  private async Task GeneroHasChanged(int value)
  {
    var result = await (new Repositorio()).GetJuegosByGenero(value);
    JuegosList = result;
  }

  async Task RegistrarEnBaseDeDatos()
  {
    await Task.Delay(2000);
  }
  /*

  List<Genero> ListaMonedas ;
  int MonedaSelected = 0;

  protected override Task OnInitializedAsync()
  {

    return base.OnInitializedAsync();
  }

  */

}
